---

- name: "Check for existing LetsEncrypt cert on remote"
  become: yes
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
  register: letsencrypt_cert

- name: "Check for local LetsEncrypt backup config"
  ansible.builtin.stat:
    path: "{{ export_path }}/letsencrypt/{{ domain_name }}/letsencrypt.tgz"
  register: local_letsencrypt_config
  delegate_to: localhost
  when: not letsencrypt_cert.stat.exists

- name: "Upload saved LetsEncrypt config if exists"
  become: yes
  ansible.builtin.copy:
    src: "{{ export_path }}/letsencrypt/{{ domain_name }}/letsencrypt.tgz"
    dest: "/etc/letsencrypt.tgz"
  when: not letsencrypt_cert.stat.exists and local_letsencrypt_config.stat.exists

- name: "Unpack LetsEncrypt config"
  become: yes
  ansible.builtin.unarchive:
    src: "/etc/letsencrypt.tgz"
    dest: "/etc/"
    remote_src: yes
  when: not letsencrypt_cert.stat.exists and local_letsencrypt_config.stat.exists

- name: "Stop NGINX (ignore failure if not running)"
  become: yes
  ansible.builtin.service:
    name: nginx
    state: stopped
  ignore_errors: true
  changed_when: false
  when: not letsencrypt_cert.stat.exists

- name: "Temporarily allow HTTP inbound on port 80 (for standalone challenge)"
  become: yes
  ansible.builtin.iptables:
    chain: INPUT
    destination_port: 80
    jump: ACCEPT
    protocol: tcp
    state: present
  changed_when: false
  when: not letsencrypt_cert.stat.exists

- name: "Request LetsEncrypt cert with certbot (standalone mode)"
  become: yes
  ansible.builtin.command:
    cmd: >-
      certbot certonly
      --standalone
      --preferred-challenges http
      --agree-tos
      -m {{ certbot_mail_address }}
      -d {{ domain_name }}
      --non-interactive
  args:
    creates: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
  when: not letsencrypt_cert.stat.exists

- name: "Revoke temporary HTTP allow rule"
  become: yes
  ansible.builtin.iptables:
    chain: INPUT
    destination_port: 80
    jump: ACCEPT
    protocol: tcp
    state: absent
  changed_when: false
  when: not letsencrypt_cert.stat.exists

- name: "Ensure local LetsEncrypt export directory exists"
  ansible.builtin.file:
    path: "{{ export_path }}/letsencrypt/{{ domain_name }}/"
    state: directory
    recurse: true
  delegate_to: localhost

- name: "Compress /etc/letsencrypt into tarball for archival"
  become: yes
  ansible.builtin.archive:
    path: /etc/letsencrypt
    dest: /etc/letsencrypt.tgz

- name: "Fetch certbot-generated cert files back to export_path"
  become: yes
  ansible.builtin.fetch:
    src: "/etc/letsencrypt/live/{{ domain_name }}/{{ item }}"
    dest: "{{ export_path }}/letsencrypt/{{ domain_name }}/{{ item }}"
    flat: true
  loop:
    - cert.pem
    - chain.pem
    - README
    - fullchain.pem
    - privkey.pem

- name: "Fetch letsencrypt.tgz archive back to export_path"
  become: yes
  ansible.builtin.fetch:
    src: "/etc/letsencrypt.tgz"
    dest: "{{ export_path }}/letsencrypt/{{ domain_name }}/letsencrypt.tgz"
    flat: true
  changed_when: false

# OPTIONAL modern touch: Recommend cronjob or systemd timer for auto-renewal reminder:
# This task is optional but wise for longevity!

- name: "Create certbot renew cronjob (optional best practice)"
  become: yes
  ansible.builtin.cron:
    name: "Auto-renew Let's Encrypt certificates"
    job: "certbot renew --quiet --post-hook 'systemctl reload postfix || true'"
    minute: 0
    hour: 3
    state: present

